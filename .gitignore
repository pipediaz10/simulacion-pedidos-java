import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

public class PedidoProcessingApp {

    // Clase que representa un pedido
    static class Pedido {
        private final int id;
        private final String cliente;

        public Pedido(int id, String cliente) {
            this.id = id;
            this.cliente = cliente;
        }

        @Override
        public String toString() {
            return "Pedido{id=" + id + ", cliente='" + cliente + "'}";
        }
    }

    public static void main(String[] args) throws InterruptedException {
        BlockingQueue<Pedido> colaPedidos = new LinkedBlockingQueue<>();
        AtomicInteger contadorProcesados = new AtomicInteger(0);

        int NUM_PRODUCTORES = 2;
        int NUM_CONSUMIDORES = 2;

        ExecutorService ejecutores = Executors.newFixedThreadPool(NUM_PRODUCTORES + NUM_CONSUMIDORES);

        // Simulación de productores
        for (int i = 0; i < NUM_PRODUCTORES; i++) {
            int idProd = i + 1;
            ejecutores.submit(() -> {
                int pedidoId = 1;
                try {
                    while (true) {
                        Pedido pedido = new Pedido(pedidoId++, "Cliente" + idProd);
                        colaPedidos.put(pedido);
                        System.out.println("[PRODUCTOR " + idProd + "] Creó: " + pedido);
                        Thread.sleep(500); // simula tiempo entre pedidos
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            });
        }

        // Simulación de consumidores
        for (int i = 0; i < NUM_CONSUMIDORES; i++) {
            int idCons = i + 1;
            ejecutores.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        while (true) {
                            Pedido pedido = colaPedidos.take();
                            System.out.println("    [CONSUMIDOR " + idCons + "] Procesando: " + pedido);
                            Thread.sleep(1000); // simula tiempo de procesamiento
                            int total = contadorProcesados.incrementAndGet();
                            System.out.println("    [CONSUMIDOR " + idCons + "] Contador actualizado: " + total);
                        }
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            });
        }

        // Corre la simulación por un tiempo y luego finaliza (opcional)
        Thread.sleep(10000); // Simula ejecución por 10 segundos
        ejecutores.shutdownNow();
        ejecutores.awaitTermination(5, TimeUnit.SECONDS);

        System.out.println("Simulación terminada. Pedidos procesados: " + contadorProcesados.get());
    }
}

